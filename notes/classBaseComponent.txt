


# What is a class-based component
   -> Class-based components are js class that extends React. Component 
      -> and it has render() method that returns JSX

  # - 
   -> Never update the state variables directly       


  # life Cycle

   # ex. if the parent is a functional component
    -> Suppose userClass is a class-based component and it is inside the About Component
    -> 
    -> When the About component is called it starts rendering/loading/mounting the component line by line when it reaches userClass 
    -> then it starts loading userClass 
       -> Now the new instance of this class is created
       -> When this class is instantiated
          -> First the constructor is called
          -> then render() is called



    https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/


  # life Cycle


    #ex.  if the parent and child are both class-based components

     -> First the parent life cycle will be triggered
      -> parent constructor will be called
        -> Then parent render() will be called
         -> Then rendering starts in render there is a child component loading/mounting/rendering goes to the child meanwhile parents mounting hasn't finished yet

         -> child life cycle will be triggered
           -> parent constructor will be called
           -> then child render()
           -> Then the child componentDidMount will be called

      -> After all this once the child has been mounted successfully the parent componentDidMount will be called   


          
     # two phases of life-cycle

        1. render phases 
          -> mounting
           -> constructor is called 
           -> Render is called

        2. commit phases
          -> DOM is updated
          -> componentDidMount is called        



      ex.  there are multiple children

      -> parent constructor
         parent render
         first child constructor
         first child render
         second child constructor
         second child render
         the first child did mount
         the second child did mount
         parent did Mount 

         
     -> If there are multiple children react batch them together 
       -> The render phase is batched and the commit phase is batched together

       that is why output will be in this order
        -> First the render phase
           ->  First child constructor
               first child render
               second child constructor
               second child render

       -> Once the batch render phase is complete Then the commit phase starts
           ->  The first child did mount
               The second child did mount   

      this is an optimization of react.js           



https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

   # updating state

     -> mounting cycle
       render phase
        -> constructor(dummy data)
        -> render(dummy data)
           <HTML(dummy data)>

       commit phase    
        -> componentDidMount
           <API call>
           this.setState -> state variable is updated
      
     -> updating cycle
        render phase 
          -> render(API data)
              <HTML (API data)>   
          -> componentDidUpdate             



     #  componentWillUnmount -
       -> will be called when the component is gone from the page  
          ex. when we go to another page/component   leaving a component

        -> use case of componentWillUnmount() clear stuff of that component after leaving to another component
          
          -> ex. if we have setInterval in  componentDidMount it will keep calling it again and again even when we leave the component 
              so we need something to clear when we leave the component

```
               componentDidUpdate() {
                   this.timer = setInterval(()=>{
                     console.log(" componentDidUpdate");
                  },1000);
              }

               componentWillUnmount() {
                  clearInterval(this.timer)
                  console.log("child componentWillUnmount");
               }
```               

Problem with Async in useEffect:

The useEffect hook is not designed to work directly with async functions. If you pass an async function directly to useEffect, it returns a Promise, and React doesn't handle the Promise returned by the effect function.